#!/usr/bin/python
# -*- coding: utf-8 -*-
# {{ rm['metadata']['copyright_str'] }}
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from {{ import_path }}.{{ network_os }}.argspec.facts.facts import FactsArgs
from {{ import_path }}.{{ network_os }}.argspec.interfaces.interfaces import {{ resource|capitalize }}Args
from {{ import_path }}.{{ network_os }}.facts.base import FactsBase
from {{ import_path }}.{{ network_os }}.facts.{{ resource }}.{{ resource }} import {{ resource|capitalize }}Facts


class Facts(FactsArgs, FactsBase):

    VALID_SUBSETS = [
        'net_configuration_{{ resource }}',
    ]

    def get_facts(self, module, connection, gather_subset=['all']):
        runable_subsets = set()
        exclude_subsets = set()

        for subset in gather_subset:
            if subset == 'all':
                runable_subsets.update(self.VALID_SUBSETS)
                continue
            if subset.startswith('!'):
                subset = subset[1:]
                if subset == 'all':
                    exclude_subsets.update(self.VALID_SUBSETS)
                    continue
                exclude = True
            else:
                exclude = False

            if subset not in self.VALID_SUBSETS:
                module.fail_json(msg='Bad subset')

            if exclude:
                exclude_subsets.add(subset)
            else:
                runable_subsets.add(subset)

        if not runable_subsets:
            runable_subsets.update(self.VALID_SUBSETS)

        runable_subsets.difference_update(exclude_subsets)
        self.ansible_facts['gather_subset'] = list(runable_subsets)

        for attr in runable_subsets:
            getattr(self, '_get_%s' % attr, {})(module, connection)

        return self.ansible_facts

    def _get_net_configuration_{{ resource }}(self, module, connection):
        return {{ resource|capitalize }}Facts({{ resource|capitalize }}Args.argument_spec, 'config', 'options').populate_facts(module, connection)
